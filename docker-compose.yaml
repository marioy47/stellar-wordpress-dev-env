version: "3"

services:

  # Generate SSL certs for the local development environment.
  mkcert:
    build: ./docker/mkcert
    container_name: stellar-dev-mkcert
    volumes:
      - cert-data:/root/.local/share/mkcert
    command:
      - sh
      - -c
      - |
        if [ ! -f "stellar-dev-webserver.crt" ]; then
          mkcert -cert-file "stellar-dev-webserver.crt" -key-file "stellar-dev-webserver.key" "${WORDPRESS_HOST:-localhost}" "*.${WORDPRESS_HOST:-localhost}" localhost 127.0.0.1
        fi

  # Nginx Webserver and proxy for PhpMyAdmin and MailHog
  webserver:
    image: nginx:alpine
    container_name: stellar-dev-webserver
    environment:
      WORDPRESS_HOST: ${WORDPRESS_HOST:-localhost}
      PMA_HOST: pma.${WORDPRESS_HOST:-localhost}
      MAIL_HOST: mail.${WORDPRESS_HOST:-localhost}
      WORDPRESS_REMOTE_URL: ${WORDPRESS_REMOTE_URL:-https://use-the-env-file-to-overload-this-url.com}
      WORDPRESS_CONTAINER: stellar-dev-wp
      PMA_CONTAINER: stellar-dev-pma
      MAIL_CONTAINER: stellar-dev-mail
    volumes:
      - ./docker/webserver/nginx-templates:/etc/nginx/templates:ro
      - wp-data:/var/www/html
      - cert-data:/root/.local/share/mkcert
    command:
      - sh
      - -c
      - |
        sleep 2
        envsubst '$$WORDPRESS_HOST,$$WORDPRESS_CONTAINER,$$WORDPRESS_REMOTE_URL' < /etc/nginx/templates/wordpress.conf > /etc/nginx/conf.d/wordpress.conf
        envsubst '$$PMA_HOST' < /etc/nginx/templates/pma.conf > /etc/nginx/conf.d/pma.conf
        envsubst '$$MAIL_HOST' < /etc/nginx/templates/mail.conf > /etc/nginx/conf.d/mail.conf
        rm -f /etc/nginx/conf.d/default.conf
        nginx -g 'daemon off;'
    ports:
      - ${WORDPRESS_PORT_HTTP:-8080}:80
      - ${WORDPRESS_PORT_HTTPS:-8443}:443
    depends_on:
      - mkcert

  # WordPress Application
  wp:
    build:
      context: ./docker/wp/
      args:
        - WORDPRESS_VERSION=${WORDPRESS_VERSION:-fpm}
    container_name: stellar-dev-wp
    environment:
      COMPOSER_HOME: /tmp/composer
      WORDPRESS_DB_HOST: stellar-dev-db
      WORDPRESS_DB_USER: ${MYSQL_USER:-wordpress}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD:-wordpress}
      WORDPRESS_DB_NAME: ${MYSQL_DATABASE:-wordpress}
      WORDPRESS_CONFIG_EXTRA: |
        define( 'WP_DEBUG', true );
        define( 'WP_DEBUG_DISPLAY', true );
        define( 'WP_DEBUG_LOG', '/tmp/wordpress/wordpress.log' );
        define( 'WP_REDIS_HOST', 'stellar-dev-cache' );
    volumes:
      # configuration files
      - ./docker/wp/msmtprc:/etc/msmtprc
      - ./docker/wp/php-config.ini:/usr/local/etc/php/conf.d/php-config.ini
      - ./docker/wp/msmtp-mailhost-fixer.php:/var/www/html/wp-content/mu-plugins/msmtp-mailhost-fixer.php
      # Enable log access
      - ./logs/xdebug:/tmp/xdebug
      - ./logs/wordpress:/tmp/wordpress
      # WordPress files
      - wp-data:/var/www/html
      - ./plugins:/var/www/html/wp-content/plugins
      - ./themes:/var/www/html/wp-content/themes
      - ./public:/var/www/html/public

  # MariaDB database
  db:
    image: mariadb
    container_name: stellar-dev-db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-wordpress}
      MYSQL_USER: ${MYSQL_USER:-wordpress}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-wordpress}
    volumes:
      - db-data:/var/lib/mysql

  # Install WP with wp-cli
  wp-cli:
    image: wordpress:cli
    container_name: stellar-dev-cli
    environment:
      WORDPRESS_HOST: ${WORDPRESS_HOST:-localhost} # To pass to wp-cli
      WORDPRESS_PORT_HTTP: ${WORDPRESS_PORT_HTTP:-8080}
      WORDPRESS_PORT_HTTPS: ${WORDPRESS_PORT_HTTPS:-8443}
      WORDPRESS_DISABLE_HTTPS: ${WORDPRESS_DISABLE_HTTPS:-}
      WORDPRESS_ADMIN_USER: ${WORDPRESS_ADMIN_USER:-admin}
      WORDPRESS_ADMIN_PASS: ${WORDPRESS_ADMIN_PASS:-password}
      WORDPRESS_DB_HOST: stellar-dev-db
      WORDPRESS_DB_USER: ${MYSQL_USER:-wordpress}
      WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD:-wordpress}
      WORDPRESS_DB_NAME: ${MYSQL_DATABASE:-wordpress}
      WORDPRESS_CONFIG_EXTRA: |
        define( 'WP_DEGUB_DISPLAY', false );
        define( 'WP_DEBUG_LOG', true );
        define( 'WP_REDIS_HOST', 'stellar-dev-cache' );
    volumes_from:
      - wp
    user: xfs
    command:
      - sh
      - -c
      - |
        sleep 10
        URL="https://$${WORDPRESS_HOST}:$${WORDPRESS_PORT_HTTPS}"
        if [ "$${WORDPRESS_DISABLE_HTTPS}" != "" -a "$${WORDPRESS_DISABLE_HTTPS}" != "0" -a  "$${WORDPRESS_DISABLE_HTTPS}" != "no" ]; then
          URL="http://$${WORDPRESS_HOST}:$${WORDPRESS_PORT_HTTP}"
        fi
        wp core install --path=/var/www/html --title=StellarDEV --admin_user=$${WORDPRESS_ADMIN_USER} --admin_password=$${WORDPRESS_ADMIN_PASS} --admin_email=admin@example.com --skip-email --url="$$URL"
        wp plugin install redis-cache --activate
        wp redis enable
        echo "Go to $$URL/wp-admin/ with User $${WORDPRESS_ADMIN_USER} and password $${WORDPRESS_ADMIN_PASS}"

  # Redis cache
  cache:
    image: redis:alpine
    container_name: stellar-dev-cache

  # MailHog mail catcher
  mail:
    image: mailhog/mailhog
    container_name: stellar-dev-mail

  # PhpMyAdmin
  pma:
    image: phpmyadmin
    container_name: stellar-dev-pma
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-root}
      MYSQL_USER: ${MYSQL_USER:-wordpress}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-wordpress}

networks:
  default:
    name: stellar-dev-network

volumes:
  db-data:
  wp-data:
  cert-data:

# vim: wrap
